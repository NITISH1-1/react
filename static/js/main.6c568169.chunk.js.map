{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","aboutText","onClick","toggleMode","role","htmlFor","TextForm","useState","text","setText","style","color","heading","rows","placeholder","onChange","event","console","log","target","value","backgroundColor","newText","toUpperCase","toLowerCase","split","join","length","Alert","alert","msg","defaultProps","App","setMode","setAlert","showAlert","message","document","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.6c568169.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n    <div className=\"container-fluid\">\r\n      <a className=\"navbar-brand\" href=\"#\">\r\n        {props.title}\r\n      </a>\r\n      <button\r\n        className=\"navbar-toggler\"\r\n        type=\"button\"\r\n        data-bs-toggle=\"collapse\"\r\n        data-bs-target=\"#navbarSupportedContent\"\r\n        aria-controls=\"navbarSupportedContent\"\r\n        aria-expanded=\"false\"\r\n        aria-label=\"Toggle navigation\"\r\n      >\r\n        <span className=\"navbar-toggler-icon\"></span>\r\n      </button>\r\n      <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n        <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n          <li className=\"nav-item\">\r\n            <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">\r\n              Home\r\n            </a>\r\n          </li>\r\n          <li className=\"nav-item\">\r\n            <a className=\"nav-link\" href=\"/\">\r\n              {props.aboutText}\r\n            </a>\r\n          </li>\r\n        </ul>\r\n        <div className={`form-check form-switch text-${props.mode === 'light' ? 'dark' : 'light'}`}>\r\n        <input className=\"form-check-input pointer\" onClick={props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n        <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable Dark Mode</label>\r\n      </div>  \r\n      </div>\r\n    </div>\r\n  </nav>\r\n  )\r\n}\r\n\r\nNavbar.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  aboutText: PropTypes.string.isRequired\r\n}\r\n\r\nNavbar.defaultProps = {\r\n  title: 'Set Title Here',\r\n  aboutText: 'About'\r\n}","import React, {useState} from \"react\";\r\n\r\nexport default function TextForm(props) {\r\n  const handelOnClick = () => {\r\n    let newText = text.toUpperCase();\r\n    setText(newText);\r\n  }\r\n\r\n  const handelOnClickLo = () => {\r\n    let newText = text.toLowerCase();\r\n    setText(newText);\r\n  }\r\n\r\n  const handleOnChange = (event) => {\r\n    console.log('being changed')\r\n    setText(event.target.value);\r\n  }\r\n\r\n  const handelExtraSpaces = () => {\r\n    let newText = text.split(/[ ]+/);\r\n    setText(newText.join(\" \"));\r\n  }\r\n\r\n  const [text, setText] = useState(\"\");\r\n  return (\r\n    <>\r\n      <div style={{color: props.mode === 'light' ? 'black': 'white'}} className=\"mb-3\">\r\n        <h1>{props.heading}</h1>\r\n        <textarea\r\n          className=\"form-control\"\r\n          id=\"exampleFormControlTextarea1\"\r\n          rows=\"8\"\r\n          placeholder=\"Enter your text\"\r\n          onChange={handleOnChange}\r\n          value={text}\r\n          style={{backgroundColor: props.mode === 'light' ? 'white': 'grey', color: props.mode === 'light' ? 'black': 'white' }}\r\n        ></textarea>\r\n      </div>\r\n      <div className=\"flex\">\r\n      <button className=\"btn btn-primary cursor mx-1\" onClick={handelOnClick} >Convert to Uppercase</button>\r\n      <button className=\"btn btn-primary cursor mx-1\" onClick={handelOnClickLo} >Convert to Lowercase</button>\r\n      <button className=\"btn btn-primary cursor mx-1\" onClick={handelExtraSpaces} >Remove Extra Spaces</button>\r\n\r\n      </div>\r\n      <div className=\"container my-3\" style={{color: props.mode === 'light' ? 'black': 'white'}}>\r\n        <h2 >Your Text Summary</h2>\r\n        <p>{text.split(\" \").length} words and {text.length} characters</p>\r\n        <p>{0.008 * text.split(\" \").length} Minutes Read</p>\r\n        <h2>Preview</h2>\r\n        <p>{text.length > 0 ? text : 'Etner something above to preview it'}</p>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function Alert(props) {\r\n  // const capitalize = (word)=> {\r\n  //   const lower = word.toLowerCase();\r\n  //   return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n  // }\r\n  return (\r\n    <div>\r\n      <div className={`alert alert-${props?.alert?.type} alert-dismissible fade show`} role=\"alert\">\r\n        <strong>{props?.alert?.type}</strong>: {props?.alert?.msg}\r\n        <button\r\n          type=\"button\"\r\n          className=\"btn-close\"\r\n          data-bs-dismiss=\"alert\"\r\n          aria-label=\"Close\"\r\n        ></button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import \"./App.css\";\r\nimport Navbar from \"./components/Navbar\";\r\nimport TextForm from \"./components/TextForm\";\r\nimport Alert from \"./components/Alert\";\r\n\r\nimport { useState } from \"react\";\r\n\r\nfunction App() {\r\n  const [mode, setMode] = useState(\"light\");\r\n\r\n  const toggleMode = () => {\r\n    if (mode === \"light\") {\r\n      setMode(\"dark\");\r\n      document.body.style.backgroundColor = \"#042842\";\r\n      showAlert(\"Dark mode has been enabled\", \"success\");\r\n    } else {\r\n      setMode(\"light\");\r\n      document.body.style.backgroundColor = \"white\";\r\n      showAlert(\"Light mode has been enabled\", \"success\");\r\n    }\r\n  };\r\n\r\n  const [alert, setAlert] = useState(null);\r\n\r\n  const showAlert = (message, type) => {\r\n    setAlert({\r\n      msg: message,\r\n      type: type,\r\n    });\r\n  };\r\n  return (\r\n    <>\r\n      <Navbar\r\n        title=\"TextUtils\"\r\n        mode={mode}\r\n        toggleMode={toggleMode}\r\n        aboutText=\"About US\"\r\n      />\r\n      <Alert className=\"my-3\" alert={alert} />\r\n      <div className=\"container my-3\">\r\n        <TextForm\r\n          showAlert={showAlert}\r\n          mode={mode}\r\n          heading=\"Enter the text to analyze below\"\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}